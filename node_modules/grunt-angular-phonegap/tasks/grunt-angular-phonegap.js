(function() {
  var inspect, _;

  inspect = require('util').inspect;

  require('../node_modules/coffee-script');

  _ = require('../node_modules/underscore');

  module.exports = function(grunt) {
    var originalInitConfig;
    this.initAngularPhonegapConfig = function() {
      require('../lib/shell')(grunt);
      require('../lib/phonegap.check')(grunt);
      grunt.config.set(['yeoman', 'phonegap'], 'www');
      grunt.config.set(['clean', 'phonegap'], ['<%= yeoman.phonegap %>/*', '!<%=yeoman.phonegap %>/config.xml', '!<%= yeoman.phonegap %>/res']);
      grunt.config.set(['copy', 'phonegap'], {
        expand: true,
        cwd: '<%= yeoman.dist %>',
        dest: '<%= yeoman.phonegap %>',
        src: (function() {
          var sources;
          grunt.verbose.writeln(("Do not copy `bower_components` = " + (grunt.option('bower') === false)).yellow);
          sources = ['**'];
          if (grunt.option('bower') === false) {
            sources.push(['!bower_components/**']);
          }
          return sources;
        })()
      });
      grunt.registerTask('phonegap:build', 'Build for phonegap (use `build:phonegap:[platform]` when not android)', function(target) {
        if (target == null) {
          target = "android";
        }
        return grunt.task.run(['build', 'clean:phonegap', 'copy:phonegap', "shell:phonegapBuild:" + target]);
      });
      grunt.registerTask('phonegap:emulate', 'Start the app on an emulator (use --emulator=emulator-name to specify one)', function(target) {
        var emulator;
        if (target == null) {
          target = "android";
        }
        emulator = require('../lib/emulator')(grunt, target);
        return emulator.emulate(grunt.option('emulator'), this.async());
      });
      return grunt.registerTask('phonegap:send', 'Send the app for a remote build', function(target) {
        if (target == null) {
          target = "android";
        }
        return grunt.task.run(['build:phonegap', "shell:phonegapBuildRemote:" + target]);
      });
    };
    if (_.isEmpty(grunt.config.data)) {
      grunt.verbose.writeln("Call grunt-angular-phonegap initialization " + "LATER".green.bold);
      originalInitConfig = grunt.initConfig;
      return grunt.initConfig = function(options) {
        grunt.verbose.writeln("Calling original `initConfig`".bold);
        originalInitConfig(options);
        return this.initAngularPhonegapConfig();
      };
    } else {
      grunt.verbose.writeln("Call grunt-angular-phonegap initialization " + "NOW".green.bold);
      return this.initAngularPhonegapConfig();
    }
  };

}).call(this);

/*
//@ sourceMappingURL=grunt-angular-phonegap.js.map
*/